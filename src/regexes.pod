=head0 Pattern matching

X<regular expressions>
X<regex>

A common writing error is to duplicate a word by accident.  It is hard to
catch such errors by rereading your own text, but Perl can do it for you.  A
simple technique uses so-called I<regular expressions> or I<regexes>:

=begin programlisting

    my $s = 'the quick brown fox jumped over the the lazy dog';

    token word { \w+ [ \' \w+]? }
    regex dup { <word> \W+ $<word> }
    if $s ~~ m/ <dup> / {
        say "Found '{$<dup><word>}' twice in a row";
    }

=end programlisting

Regular expressions are a concept from computer science, and consist of
primitive patterns that describe how text looks. In Perl 6 the pattern
matching is much more powerful (comparable to Context-Free Languages), so we
prefer to call them just C<regex>. (If you know regexes from other programming
languages it's best to forget their syntax; Perl 6 differs from PCRE or POSIX
regexes.)

In the simplest case a regex consists of a constant string. Matching a string
against that regex searches for that string:

=begin programlisting

    if 'properly' ~~ m/ perl / {
        say "'properly' contains 'perl'";
    }

=end programlisting

The construct C<m/ ... /> builds a regex.  A regex on the right hand side of
the C<~~> smart match operator applies against the string on the left hand
side. By default, whitespace inside the regex is irrelevant for the matching,
so writing the regex as C<m/ perl />, C<m/perl/> or C<m/ p e rl/> all produce
the exact same semantics--although the first way is probably the most readable
one.

Only word characters, digits, and the underscore cause an exact substring
search. All other characters may have a special meaning. If you want to search
for a comma, an asterisk, or another non-word character, you must quote or
escape it:

=begin programlisting

    my $str = "I'm *very* happy";

    # quoting
    if $str ~~ m/ '*very*' /   { say '\o/' }
    # escaping
    if $str ~~ m/ \* very \* / { say '\o/' }

=end programlisting

=for author

What are the C<index> and C<rindex> ops in Perl 6?

There's a sidebar explaining rindex -- did you miss that? Is it too far
away from the example? (I've also added an explanation for index() now)
    --moritz

=end for

X<regex; metasyntactic characters>
X<regex; special characters>
X<regex; . character>

However searching for literal strings gets boring pretty quickly.  Regex
support special (also called I<metasyntactic>) characters. The dot (C<.>)
matches a single, arbitrary character:

=begin programlisting

    my @words = <spell superlative openly stuff>;
    for @words -> $w {
        if $w ~~ m/ pe.l / {
            say "$w contains $/";
        } else {
            say "no match for $w";
        }
    }

=end programlisting

This prints

=begin screen

    spell contains pell
    superlative contains perl
    openly contains penl
    no match for stuff

=end screen

The dot matched an C<l>, C<r>, and C<n>, but it would also match a space in
the sentence I<< the spectroscoB<pe l>acks resolution >>--regexes don't care
about word boundaries at all. The special variable C<$/> stores (among other
things) only the part of the string the matched the regular expression. C<$/>
holds the so-called I<match object>.

X<regex; \w>

Suppose you have a big chunk of text.  For solving a crossword puzzle you are
looking for words containing C<pe>, then an arbitrary letter, and then an C<l>
(but not a space, as your puzzle has extra markers for those). The appropriate
regex for that is C<m/pe \w l/>.  The C<\w> control sequence stands for a
"word" character--a letter, digit, or an underscore. Several other common
control sequences each match a single character:

=begin table Backslash sequences and their meaning

# TODO: Add a non-latin digit to \d
# we used to have \c[ARABIC-INDIC DIGIT NINE], but LaTeX didn't like that :/

=headrow

=row

=cell Symbol

=cell Description

=cell Examples

=bodyrows

=row

=cell  C<\w>

=cell  word character

=cell  l, ö, 3, _

=row

=cell C<\d>

=cell digit

=cell 0, 1,

=row

=cell C<\s>

=cell whitespace

=cell (tab), (blank), (newline)

=row

=cell C<\t>

=cell tabulator

=cell (tab)

=row

=cell C<\n>

=cell newline

=cell (newline)

=row

=cell C<\h>

=cell horizontal whitespace

=cell (space), (tab)

=row

=cell C<\v>

=cell vertical whitespace

=cell (newline), (vertical tab)

=end table

Each of these backslash sequence means the complete opposite if you convert
the letter to upper case: C<\W> matches a character that's not a word
character and C<\N> matches a single character that's not a newline.

X<regex; custom character classes>

These matches are not limited to the ASCII range--C<\d> matches Latin,
Arabic-Indic, Devanagari and other digits, C<\s> matches non-breaking
whitespace and so on. These I<character classes> follow the Unicode definition
of what is a letter, a number, and so on. Define custom character classes by
listing them inside nested angle and square brackets C<< <[ ... ]> >>.

=begin programlisting

    if $str ~~ / <[aeiou]> / {
        say "'$str' contains a vowel";
    }

    # negation with a -
    if $str ~~ / <-[aeiou]> / {
        say "'$str' contains something that's not a vowel";
    }

=end programlisting

X<regex; character range>

Rather than listing each character in the character class individually, you
may specify a range of characters by placing the range operator C<..> between
the character that starts the range and the character that ends the range:

=begin programlisting

    # match a, b, c, d, ..., y, z
    if $str ~~ / <[a..z]> / {
        say "'$str' contains a lower case Latin letter";
    }

=end programlisting

X<regex; character class addition>
X<regex; character class subtraction>

Added to or subtract from character classes with the C<+> and C<-> operators:

=begin programlisting

    if $str ~~ / <[a..z]+[0..9]> / {
        say "'$str' contains a letter or number";
    }

    if $str ~~ / <[a..z]-[aeiou]> / {
        say "'$str' contains a consonant";
    }

=end programlisting

The negated character class is a special application of this idea.

X<regex; quantifier>
X<regex; ? quantifier>

A I<quantifier> can specify how often something has to occur. A question mark
C<?> makes the preceding unit (be it a letter, a character class, or something
more complicated) optional, meaning it can either be present either zero or
one times in the string being matched. So C<m/ho u? se/> matches either
C<house> or C<hose>. You can also write the regex as C<m/hou?se/> without any
spaces, and the C<?> still quantifies only the C<u>.

X<regex; * quantifier>
X<regex; + quantifier>

The asterisk C<*> stands for zero or more occurrences, so C<m/z\w*o/> can
match C<zo>, C<zoo>, C<zero> and so on. The plus C<+> stands for one or more
occurrences, C<\w+> I<usually> matches what you might consider a word (though
only matches the first three characters from C<isn't> because C<'> isn't a
word character).

X<regex; ** quantifier>

The most general quantifier is C<**>. If followed by a number it matches that
many times, and if followed by a range, it can match any number of times that
the range allows:

=begin programlisting

    # match a date of the form 2009-10-24:
    m/ \d**4 '-' \d\d '-' \d\d /

    # match at least three 'a's in a row:
    m/ a ** 3..* /

=end programlisting

If the right hand side is neither a number nor a range, it becomes a
delimiter, which means that C<m/ \w ** ', '/> matches a list of characters
separated by a comma and a whitespace each.

X<regex; greedy matching>
X<regex; non-greedy matching>

If a quantifier has several ways to match, Perl will choose the longest one.
This is I<greedy> matching. Appending a question mark to a quantifier makes it
non-greedy N<The non-greedy general quantifier is C<$thing **? $count>, so the
question mark goes directly after the second asterisk.>N<This example is a
very poor way to parse HTML; using a proper parser is always preferable.>:

=begin programlisting

    my $html = '<p>A paragraph</p> <p>And a second one</p>';
    if $html ~~ m/ '<p>' .* '</p>' / {
        say 'Matches the complete string!';
    }

    if $html ~~ m/ '<p>' .*? '</p>' / {
        say 'Matches only <p>A paragraph</p>!';
    }

=end programlisting

X<regex; grouping>

To apply a modifier to more than just one character or character class, group
items with square brackets:

=begin programlisting

    my $ingredients = 'milk, flour, eggs and sugar';
    # prints "milk, flour, eggs"
    $ingredients ~~ m/ [\w+] ** [\,\s*] / && say $/;

=end programlisting

X<regex; alternation>

Separate I<alternations>--tokens and units of which I<any> can match-- with
vertical bars. One vertical bar between two parts of a regex means that the
longest alternative wins.  Two bars make the first matching alternative win.

=begin programlisting

    $string ~~ m/ \d**4 '-' \d\d '-' \d\d | 'today' | 'yesterday' /

=end programlisting

=head1 Anchors

X<regex; anchors>

So far every regex could match anywhere within a string.  Often it is
desirable to limit the match to the start or end of a string or line, or to
word boundaries.

X<regex; string start anchor>
X<regex; ^>
X<regex; string end anchor>
X<regex; $>

A single caret C<^> anchors the regex to the start of the string, a dollar
C<$> to the end. C<m/ ^a /> matches strings beginning with an C<a>, and C<m/ ^
a $ /> matches strings that consist only of an C<a>.

=begin table Regex anchors

=headrow

=row

=cell Anchor

=cell Meaning

=bodyrows

=row

=cell C<^>

=cell start of string

=row

=cell C<$>

=cell end of string

=row

=cell C<^^>

=cell start of a line

=row

=cell C<$$>

=cell end of a line

=row

=cell C<<< << >>>

=cell left word boundary

=row

=cell C<«>

=cell left word boundary

=row

=cell C<<< >> >>>

=cell right word boundary

=row

=cell C<»>

=cell right word boundary

=end table

=head1 Captures

X<regex; captures>

Regexes are useful to check if a string is in a certain format, and to search
for patterns within a string. With some more features they can be very good
for I<extracting> information too.

X<regex; $/>

Surrounding a part of a regex with round brackets C<(...)> makes Perl
I<capture> the string it matches. The string matched by the first group of
parentheses is available in C<$/[0]>, the second in C<$/[1]>, etc.  C<$/> acts
as an array containing the captures from each parentheses group.

=begin programlisting

    my $str = 'Germany was reunited on 1990-10-03, peacefully';
    if $str ~~ m/ (\d**4) \- (\d\d) \- (\d\d) / {
        say 'Year:  ', $/[0];
        say 'Month: ', $/[1];
        say 'Day:   ', $/[2];
        # usage as an array:
        say $/.join('-');       # prints 1990-10-03
    }

=end programlisting

X<regex; quantified capture>

If you quantify a capture, the corresponding entry in the match object is a
list of other match objects:

=begin programlisting

    my $ingredients = 'eggs, milk, sugar and flour';
    if $ingredients ~~ m/(\w+) ** [\,\s*] \s* 'and' \s* (\w+)/ {
        say 'list: ', $/[0].join(' | ');
        say 'end:  ', $/[1];
    }

=end programlisting

This prints

=begin screen

    list: eggs | milk | sugar
    end:  flour

=end screen

The first capture, C<(\w+)>, was quantified, and thus C<$/[0]> is a list on
which the code calls the C<.join> method. Regardless of how many times the
first capture matches, the second is still available in C<$/[1]>.

As a shortcut, C<$/[0]> is also available under the name C<$0>, C<$/[1]> as
C<$1>, and so on. These aliases are also available inside the regex. This
allows you to write a regex that detects that common error of duplicated
words:

=begin programlisting

    my $s = 'the quick brown fox jumped over B<the the> lazy dog';

    if $s ~~ m/ « ( \w+ ) \W+ $0 » / {
        say "Found two '$0' in a row";
    }

=end programlisting

The regex first anchors to a left word boundary with C<«> so that it doesn't
match partial duplication of words.  Next, the regex captures a word (C<( \w+
)>), followed by at least one non-word character C<\W+>.  This implies a right
word boundary, so there is no need to use an explicit boundary.  Then it
matches the previous capture followed by a right word boundary.

Without the first word boundary anchor, the regex would for example match I<<
strB<and and> beach >> or I<< laB<the the> table leg >>.  Without the last
word boundary anchor it would also match I<< B<the the>ory >>.

=head1 Named regexes

X<regex; named>

You can declare regexes just like subroutines and even name them. Suppose you
found the previous example useful and want to make it available easily.
Suppose also you want to extend it to handle contractions such as C<doesn't>
or C<isn't>:

=begin programlisting

    regex word { \w+ [ \' \w+]? }
    regex dup  { « <word> \W+ $<word> » }

    if $s ~~ m/ <dup> / {
        say "Found '{$<dup><word>}' twice in a row";
    }

=end programlisting

X<regex; backreference>

This code introduces a regex named C<word>, which matches at least one word
character, optionally followed by a single quote. Another regex called C<dup>
(short for I<duplicate>) is anchored at a word boundary.  It calls the regex
C<word> (via C<< <word> >>), matches at least one non-word character, and then
matches the same string as previously matched by the regex C<word>.  It ends
with another word boundary.  The syntax for this I<backreference> is a dollar
sign followed by the name of the named regex in angle brackets.

X<subrule>
X<regex; subrule>

Within the C<if> block, C<< $<dup> >> is short for C<$/{'dup'}>.  It accesses
the match object that the regex C<dup> produced. C<dup> also has a subrule
called C<word>, and the match object produced from that call is accessible as
C<< $<dup><word> >>.

Just as subroutines allow for ordinary code, named regexes make it easy to
organize complex regexes in smaller pieces.

=head1 Modifiers

X<regex; modifiers>

The previous example to match a list of words was:

=begin programlisting

    m/(\w+) ** [\,\s*] \s* 'and' \s* (\w+)/

=end programlisting

X<regex; :sigspace modifier>
X<regex; :s modifier>

This works, but the repeated "I don't care about whitespace" units are clumsy.
The desire to allow whitespace I<anywhere> in a string  is common, and Perl 6
regexes provide such an option: the
C<:sigspace> modifier (shortened to C<:s>):

=begin programlisting

    my $ingredients = 'eggs, milk, sugar and flour';

    if $ingredients ~~ m/:s ( \w+ ) ** \,'and' (\w+)/ {
        say 'list: ', $/[0].join(' | ');
        say 'end:  ', $/[1];
    }

=end programlisting

This modifier allows optional whitespaces in the text wherever there is one or
more whitespace character in the pattern. It's even a bit cleverer than that:
between two word characters whitespaces are mandatory.  The regex does I<not>
match the string C<eggs, milk, sugarandflour>.

X<regex; :ignorecase modifier>
X<regex; :i>

The C<:ignorecase> or C<:i> modifier makes the regex insensitive to upper and
lower case, so C<m/ :i perl /> matches not only C<perl>, but also C<PerL> or
C<PERL> (though nobody really writes the programming language in all uppercase
letters).

=head1 Backtracking control

X<regex; backtracking>

In the course of matching a regex against a string, the regex engine may reach
a point where an alternation has matched a particular branch or a quantifier
has greedily matched all it can but the final portion of the regex fails to
match.  In this case, the regex engine backs up and attempts to match another
alternative or matches one fewer character on the quantified portion to see if
the overall regex succeeds. This process of failing and trying again is called
I<backtracking>.

When matching C<m/\w+ 'en'/> against the string C<oxen>, the C<\w+> group
first matches the whole string (because of the greediness of C<+>), but then
the C<en> literal at the end can't match anything.  C<\w+> gives up one
character to match C<oxe>.  C<en> still can't match, so the C<\w+> group again
gives up one character and now matches C<ox>. The C<en> literal can now match
the last two characters of the string, and the overall match succeeds.

X<regex; :>
X<regex; disable backtracking>

While backtracking is often useful and convenient, it can also be slow and
confusing. A colon C<:> switches off backtracking for the previous quantifier
or alternation. So C<m/ \w+: 'en'/> can never match any string, because the
C<\w+> always eats up all word characters, and never releases them.

X<regex; :ratchet>

The C<:ratchet> modifier disables backtracking for a whole regex, which is
often desirable in a small regex called often from other regexes.  The
duplicate word search regex had to anchor the regex to word boundaries,
because C<\w+> would allow matching only part of a word. Disabling
backtracking produces simpler behavior where C<\w+> always matches a full
word:

=begin programlisting

    regex word { :ratchet \w+ [ \' \w+]? }
    regex dup  { <word> \W+ $<word> }

    # no match, doesn't match the 'and'
    # in 'strand' without backtracking
    'strand and beach' ~~ m/<dup>/

=end programlisting

However the effect of C<:ratchet> applies only to the regex in which it
appears.  The outer regex still backtracks, and can also retry the regex
C<word> at a different staring position.

X<regex; token>
X<token>

The C<regex { :ratchet ... }> pattern is common that it has its own shortcut:
C<token { ... }>.  The duplicate word searcher is idiomatic when written:

=begin programlisting

    B<token> word { \w+ [ \' \w+]? }
    regex dup  { <word> \W+ $<word> }

=end programlisting

X<regex; rule>
X<rule>

A token that also switches on the C<:sigspace> modifier is a C<rule>:

=begin programlisting

    rule wordlist { <word> ** \, 'and' <word> }

=end programlisting

=head1 Substitutions

X<subst>
X<substitutions>

Regexes are not only popular for data validation and extraction, but also data
manipulation. The C<subst> method matches a regex against a string.  If
a match is found, it substitutes the portion of the string that matches
with its second argument.

=begin programlisting

    my $spacey = 'with    many  superfluous   spaces';
    say $spacey.subst(rx/ \s+ /, ' ', :g);
    # output: with many superfluous spaces

=end programlisting

X<regex; :g>
X<regex; global substitution>

The C<:g> at the end tells the substitution to work I<globally> to replace
every match. Without C<:g>, it stops after the first match.

X<operators; rx//>
X<operators; m//>

Note the use of C<rx/ ... /> rather than C<m/ ... /> to construct the regex.
The former constructs a regex object. The latter not only constructs the regex
object, but immediately matches it against the topic variable C<$_>.  Using
C<m/ ... /> in the call to C<subst> creates a match object and passes it as
the first argument, rather than the regex itself.

=head1 Other Regex Features

X<regex; avoid captures>

Sometimes you want to call other regexes, but don't want them to capture the
matched text.  For example, when parsing a programming language you might
discard whitespaces and comments. You can achieve that by calling the regex as
C<< <.otherrule> >>.

For example, if you use the C<:sigspace> modifier, every continuous piece of
whitespaces calls the built-in rule C<< <.ws> >>.  This use of a rule rather
than a character class allows you to define your own version of whitespace
characters (see L<grammars>).

Sometimes you just want to take a look ahead, and check if the next characters
fulfill some properties without actually consuming them, so that the following
parts of the regex can still match them.  This is common in substitutions. In
normal English text, you always place a whitespace after a comma.  If somebody
forgets to add that whitespace, a regex can clean up after the lazy writer:

=begin programlisting

    my $str = 'milk,flour,sugar and eggs';
    say $str.subst(/',' <?before \w>/, ', ',  :g);
    # output: milk, flour, sugar and eggs

=end programlisting

X<regex; lookahead>
X<regex; zero-width assertion>

The word character after the comma is not part of the match, because it is in
a look-ahead, which C<< <?before ... > >> introduces. The leading question
mark indicates an I<zero-width assertion>: a rule that never consumes
characters from the matched string.  You can turn any call to a subrule into
an zero width assertion.  The built-in token C<< <alpha> >> matches an
alphabetic character, so you can rewrite this example as:

=begin programlisting

    say $str.subst(/',' <?alpha>/, ', ',  :g);

=end programlisting

X<regex; negative look-ahead assertion>

An leading exclamation mark negates the meaning; another variant is:

=begin programlisting

    say $str.subst(/',' <!space>/, ', ',  :g);

=end programlisting

=for author

The first sentence of the next paragraph confuses me.

=end for

A look in the opposite direction is also possible, with C<< <?after> >>. In
fact many built-in anchors can be written with look-ahead and look-behind
assertions, though usually not quite as efficient:

=begin table Emulation of anchors with look-around assertions

=headrow

=row

=cell Anchor

=cell Meaning

=cell Equivalent Assertion

=bodyrows

=row

=cell ^

=cell start of string

=cell <!after .>

=row

=cell ^^

=cell start of line

=cell <?after ^ | \n >

=row

=cell $

=cell end of string

=cell <!before .>

=row

=cell >>

=cell right word boundary

=cell <?after \w> <!before \w>

=end table

    # TODO: non-contrived example for look-behind

=head1 Match objects

=begin programlisting

    sub line-and-column(Match $m) {
        my $line   = ($m.orig.substr(0, $m.from).split("\n")).elems;
        # RAKUDO workaround for RT #70003, $m.orig.rindex(...) directly fails
        my $column = $m.from - ('' ~ $m.orig).rindex("\n", $m.from);
        $line, $column;
    }

    my $s = "the quick\nbrown fox jumped\nover the the lazy dog";

    token word { \w+ [ \' \w+]? }
    regex dup { <word> \W+ $<word> }
    if $s ~~ m/ <dup> / {
        my ($line, $column) = line-and-column($/);
        say "Found '{$<dup><word>}' twice in a row";
        say "at line $line, column $column";
    }

    # output:
    # Found 'the' twice in a row
    # at line 3, column 6

=end programlisting

X<regex; Match object>
X<Match>

Every regex match returns an object of type C<Match>. In boolean context, a
match object returns C<True> for successful matches and C<False> for failed
ones. Most properties are only interesting after successful matches.

X<Match.orig>
X<Match.from>
X<Match.to>

The C<orig> method returns the string that was matched against.  The C<from>
and C<to> methods return the positions of the start and end points of the
match.

In the previous example, the C<line-and-column> function determines the line
number in which the match occurred by extracting the string up to the match
position (C<$m.orig.substr(0, $m.from)>), splitting it by newlines, and
counting the elements. It calculates the column by searching backwards from
the match position and calculating the difference to the match position.

=begin sidebar

The C<index> method searches a string for another substring, and returns the
position of the search string.

The C<rindex> method does the same, but searches backwards from the end of the
string, so it finds the position of the last occurrence of the substring.

=end sidebar

X<Match; access as a hash>
X<named captures>
X<regex; named captures>

Using a match object as an array yields access to the positional captures.
Using it as a hash reveals the named captures.  In the previous example,
C<< $<dup> >> is a shortcut for C<< $/<dup> >> or C<< $/{ 'dup' } >>. These
captures are again C<Match> objects, so match objects are really trees of
matches.

X<Match.caps>

The C<caps> method returns all captures, named and positional, in the order in
which their matched text appears in the source string. The return value is a
list of C<Pair> objects, the keys of which are the names or numbers of the
capture and the values the corresponding C<Match> objects.

=begin programlisting

    if 'abc' ~~ m/(.) <alpha> (.) / {
        for $/.caps {
            say .key, ' => ', .value;

        }
    }

    # Output:
    # 0 => a
    # alpha => b
    # 1 => c

=end programlisting

In this case the captures are in the same order as they are in the regex, but
quantifiers can change that. Even so, C<$/.caps> follows the ordering of the
string, not of the regex. Any parts of the string which match but not as part
of captures will not appear in the values that C<caps> returns.

X<Match.chunks>

To access the non-captured parts too, use C<$/.chunks> instead.  It returns
both the captured and the non-captured part of the matched string, in the same
format as C<caps>, but with a tilde C<~> as key. If there are no overlapping
captures (which could only come from look-around assertions), the
concatenation of all the pair values that C<chunks> returns is the same as the
matched part of the string.

=for vim: spell spelllang=en tw=78
